#! /usr/bin/python3

''' Generate iTol datasets representing different branch 'binning' conditions from a file generated by BCLUST.

	For each binning condition, two files are created, one with TREE_COLOR data, and one with COLORSTRIP data.

	The files are imported as pairs into iTol to represent selection of clades and clade centroids (representatives)
	identified by BCLUST.

	Garry Gippert, 2025, GarryG@dtu.dk
'''

import os, sys, re, json, pathlib
from Color import morecolors, palecolor, zeropad

import argparse
parser = argparse.ArgumentParser(description='Generate iTol files illustrating sequence clusters')
parser.add_argument('dbindat', help='this.dbin.dat file produced by BCLUST')
parser.add_argument('-f', '--fraction', type=float, default=0.6, help = f"Fraction lighter color for clans (%(default)s)")
parser.add_argument('-p', '--prefix', default=None, help = f"Prefix for output files")
args = parser.parse_args()

def tree_colors(dat):
	''' generate tree colors dataset '''
	out = []
	out.append( "TREE_COLORS")
	out.append( "SEPARATOR SPACE")
	out.append( "DATA")
	n = 0
	for center, group in sorted(dat.items(), key = lambda x: (-len(x[1]), zeropad(x[0]))):
		out.append(' '.join([f"{group[0]}|{group[-1]}", "range", f"#{palecolor(morecolors[n%len(morecolors)], args.fraction)}", center]))
		n += 1
	return out, n

def branch_centroids(dat, dataset_label='Bclust centers'):
	''' generate branch centroids dataset '''
	shapes = []
	colors = []
	labels = []
	points = []
	n = 0
	for center, group in sorted(dat.items(), key = lambda x: (-len(x[1]), zeropad(x[0]))):
		shape, color, label, value = "1", "#" + morecolors[n%len(morecolors)], center, str(len(group))
		shapes.append(shape)
		colors.append(color)
		labels.append(center)
		points.append(','.join([label, color, value]))
		n += 1
	out = []
	out.append( "DATASET_COLORSTRIP")
	out.append( "SEPARATOR COMMA")
	out.append(f"DATASET_LABEL,{dataset_label}")
	out.append( "COLOR,#ff0000")
	out.append( "LEGEND_TITLE,Centers")
	out.append(f"LEGEND_SHAPES,{','.join(shapes)}")
	out.append(f"LEGEND_COLORS,{','.join(colors)}")
	out.append(f"LEGEND_LABELS,{','.join(labels)}")
	out.append( "DATA")
	for p in points:
		out.append(p)
	return out

# MAIN

if not os.path.isfile(args.dbindat):
	sys.stderr.write(f"dbindat {args.dbindat} not readable\n")
	sys.exit(1)

dbin = []
with open(args.dbindat, 'r') as fp:
	dbin = json.load(fp)
fp.close()
sys.stderr.write(f"Read {len(dbin)} binning conditions from {args.dbindat}\n")

# Create one pair of files (clusters and centers) for each set of binning conditions
for con in dbin:
	bmin, bmed, bdis, centers = con['bmin'], con['bmed'], con['bdis'], con['centers']
	dat = {}
	for label, centroid in centers.items():
		if centroid not in dat:
			dat[centroid] = []
		dat[centroid].append(label)
	if 'None' in dat:
		del(dat['None'])
	prefix = args.prefix if args.prefix is not None else args.dbindat.replace('.dat', '')

	filename = f"{prefix}_{bmin}_{bmed}_{bdis}.tree_colors.txt"
	n = None
	with open(filename, 'w') as fp:
		out, n = tree_colors(dat)
		fp.write('\n'.join(out) + '\n')
	fp.close()
	sys.stderr.write(f"Wrote iTol TREE_COLORS format to {filename} with {n} clades\n")

	filename = f"{prefix}_{bmin}_{bmed}_{bdis}.centers.txt"
	with open(filename, 'w') as fp:
		out = branch_centroids(dat, f"Centers {bdis}")
		fp.write('\n'.join(out) + '\n')
	fp.close()
	sys.stderr.write(f"Wrote iTol DATASET_COLORSTRIP to {filename}\n")
